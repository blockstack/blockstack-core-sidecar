name: stacks-blockchain-sidecar

env:
  SLACK_MESSAGE_ARTIFACT: slack_message_artifact

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/CHANGELOG.md'
  pull_request:

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Notify slack start
        if: success()
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          channel: devops-notify
          status: STARTING
          color: warning

      - run: echo ${{ steps.slack.outputs.message_id }} > ${{ env.SLACK_MESSAGE_ARTIFACT }}

      - name: Store Slack Message ID
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.SLACK_MESSAGE_ARTIFACT }}
          path: ${{ env.SLACK_MESSAGE_ARTIFACT }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'

      - name: Install deps
        run: npm install

      - name: Setup integration environment
        run: |
          sudo ufw disable
          echo "::set-env name=STACKS_SIDECAR_EVENT_HOST::http://0.0.0.0"
          npm run devenv:deploy -- -d
          npm run devenv:logs -- --no-color &> docker-compose-logs.txt &

      - name: Run tests
        run: npm run test

      - name: Print integration environment logs
        run: cat docker-compose-logs.txt
        if: failure()

      - name: Teardown integration environment
        run: npm run devenv:stop
        if: always()

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: always()

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'

      - name: Install deps
        run: npm install

      - name: Lint ESLint
        run: npm run lint:eslint

      - name: Lint Prettier
        run: npm run lint:prettier

  lint-docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'

      - name: Install deps
        run: npm install

      - name: Build schema & docs
        run: npm run build

      - name: Validate generated types
        run: tsc index.d.ts

      - name: Lint JSON
        run: npm run lint:json

      - name: Lint YAML
        run: npm run lint:yaml

      - name: Validate schemas
        run: npm run validate:schemas

  build-publish:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
      - lint-docs
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.0
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.workflow }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            semantic-release-slack-bot

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v1
        with:
          repository: blockstack/${{ github.workflow }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          tags: ${{ steps.semantic.outputs.new_release_version }}
          tag_with_ref: true
          add_git_labels: true
          # Only push if there's a new release on main branch, or if building a non-main branch
          push: ${{ github.ref != 'refs/heads/master' || steps.semantic.outputs.new_release_version != '' }}

  notify-success:
    runs-on: ubuntu-latest
    needs: build-publish
    if: always() && failure()
    steps:
      - name: Retrieve Slack Message ID
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.SLACK_MESSAGE_ARTIFACT }}

      - name: Set Slack Message ID
        run: echo "::set-env name=SLACK_MESSAGE_ID::$(cat ${{ env.SLACK_MESSAGE_ARTIFACT }})"

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ env.SLACK_MESSAGE_ID }}
          channel: devops-notify
          status: SUCCESS
          color: good

  notify-fail:
    runs-on: ubuntu-latest
    needs: build-publish
    if: always() && failure()
    steps:
      - name: Retrieve Slack Message ID
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.SLACK_MESSAGE_ARTIFACT }}

      - name: Set Slack Message ID
        run: echo "::set-env name=SLACK_MESSAGE_ID::$(cat ${{ env.SLACK_MESSAGE_ARTIFACT }})"

      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ env.SLACK_MESSAGE_ID }}
          channel: devops-notify
          status: FAILED
          color: danger
